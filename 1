1. return/enter key == control+m

2. send email: mail receiver-email-address

3. erase a line: control+u

4. You can type commands one after another without waiting for them
   to finish or even to begin.

5. suspend program: control+s, resume: control+q

6. end of input, log out of terminal: control+d

7. option of command: minus sign and a single letter. e.g. wc -l 
   options can be combines: ls -r -t  == ls -rt

8. file commands:
   list file: ls -l(long list), -t(order by time), -u(order by use), -r(reverse the order)
   print file: cat
   copy file: cp
   rename/move file: mv
   line/word/character count of file: wc 
   search pattern in file: grep
   sort a file: sort -r(reverse the order), -n(numeric order)
   print last lines of file: tail
   compare files: cmp, diff
  
   file pathname: /.../.../...
   first /: root
   rest /: separator

9. find command program to execute: first current directory, then /bin, then /usr/bin 

10. directory commands:
   print working directory: pwd
   change directory: cd    
   make new directory: mkdir
   remove directory(and all files in it): rmdir
 
   .. : the parent directory of current directory
   .  : current directory
   home directory: each user has a home directory(when login, you are in your home directory) 

11. shell service:
   (1).filename shorthand: use pattern for any command argument.
       *: any string of characters(including empty string)
       ?: any single character
       [...]: match any one character in []

   (2).input/output redirection: redirect standard input/output for any command
       e.g.: wc -l temp >temp  
             wc -l temp >>temp (append to the end of file: temp)  
             wc -l <temp
       It works based on assumption: for most commands, if no filenames are given,
       process the standard input, and give result to standard output.
   
   (3).pipe: combine commands together by connecting the output of one program to
       the input of another
       e.g.: ls | wc -l

12. process of command
   ; : run several commands, e.g. date; who
   & : run command and don't wait it, e.g. wc temp &
   wait: wait all processes ending with & to finish
   kill 1234: kill the proces with id of 1234
   ps -ag: all processes running 
   nohup: the command will continue if log out
   nice: change command process's priority
   at: setting future time to run command

13. the shell will execute commands in .profile(or .bash_profile, or .bashrc) before print first prompt,
   so one can change the content in that file to force shell run some commands
   shell variables: PATH(search path for shell to run command), HOME(home directory of user)
   change shell variable: PATH = ... or PATH= ...:...:...:$PATH (append)
   get shell variable's value: $ , e.g. echo $PATH

14. calculator program: bc 
